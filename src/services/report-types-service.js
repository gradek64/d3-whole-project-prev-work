/**
 * Created by Sergiu Ghenciu on 02/07/2018
 */

'use strict';
// prettier-ignore

angular
  .module('services.report-types-service', ['utils.misc'])
  .factory('reportTypesService', [
    'misc',
    function(_) {
      const types = [
        {
          id: 1,
          label: 'Table',
          value: 'table',
          on: [
            101, 102, 103, 201, 202, 203, 301, 302, 303, 104, 204, 304,
            105, 305, 106, 206, 306, 10121, 10123, 10112, 10113, 10131,
            10132, 10242, 10246, 10241, 10243, 10354, 10356, 20121,
            20123, 20112, 20113, 20131, 20132, 20242, 20246, 20241,
            20243, 20354, 20356, 30121, 30123, 30112, 30113, 30131,
            30132, 30242, 30246, 30241, 30243, 30354, 30356,
            113, 213, 313, 112, 111, 113544, 213544, 313544,

            115, 11511, 115119,
            315, 31511, 315119,

            114, 114678, 11467, 1146,
            114678678, 11467867, 1146786,
            11467678, 1146767, 114676,
            1146678, 114667, 11466,
            11467867844, 1146786744, 114678644,
            1146767844, 114676744, 11467644,
            114667844, 11466744, 1146644,
            11467867855, 1146786755, 114678655,
            1146767855, 114676755, 11467655,
            114667855, 11466755, 1146655,

            214, 214678, 21467, 2146,
            214678678, 21467867, 2146786,
            21467678, 2146767, 214676,
            2146678, 214667, 21466,
            21467867844, 2146786744, 214678644,
            2146767844, 214676744, 21467644,
            214667844, 21466744, 2146644,
            21467867855, 2146786755, 214678655,
            2146767855, 214676755, 21467655,
            214667855, 21466755, 2146655,

            314, 314678, 31467, 3146,
            314678678, 31467867, 3146786,
            31467678, 3146767, 314676,
            3146678, 314667, 31466,
            31467867844, 3146786744, 314678644,
            3146767844, 314676744, 31467644,
            314667844, 31466744, 3146644,
            31467867855, 3146786755, 314678655,
            3146767855, 314676755, 31467655,
            314667855, 31466755, 3146655,

            400,
          ],
        },
        {
          id: 2,
          label: 'Waterfall',
          value: 'waterfall',
          on: [
            113, 213, 313, 112, 111,
            115,
            315,

            114,
            214,
            314,

            400,
          ],
        },
        {
          id: 3,
          label: 'Percentage',
          value: 'percentage',
          on: [
            1135, 2135, 3135,

            11511,
            31511,

            114678, 11467, 1146,
            114678678, 11467867, 1146786,
            11467678, 1146767, 114676,
            1146678, 114667, 11466,

            214678, 21467, 2146,
            214678678, 21467867, 2146786,
            21467678, 2146767, 214676,
            2146678, 214667, 21466,

            314678, 31467, 3146,
            314678678, 31467867, 3146786,
            31467678, 3146767, 314676,
            3146678, 314667, 31466,
          ],
        },
        {
          id: 4,
          label: 'Donut',
          value: 'donut',
          on: [101, 102, 103, 201, 202, 203, 301, 302, 303],
        },
        {
          id: 5,
          label: 'Pie',
          value: 'pie',
          on: [101, 102, 103, 201, 202, 203, 301, 302, 303],
        },
        {
          id: 6,
          label: 'Bar',
          value: 'bar',
          on: [101, 102, 103, 201, 202, 203, 301, 302, 303],
        },
        {
          id: 7,
          label: 'Sunburst',
          value: 'sunburst',
          on: [104, 204, 304, 105, 305],
        },
        {
          id: 8,
          label: 'Treemap',
          value: 'treemap',
          on: [105, 305],
        },
        {
          id: 9,
          label: 'Sankey',
          value: 'sankey',
          on: [106, 206, 306],
        },
        {
          id: 10,
          label: 'Rows',
          value: 'rows',
          on: [
            1012, 1011, 1013, 1024, 1035, 2012, 2011, 2013, 2024,
            2035, 3012, 3011, 3013, 3024, 3035,
          ],
        },
      ];

      /* pathId | typeId */
      const selectedMap = {
        101: [4],
        102: [4],
        103: [4],
        201: [4],
        202: [4],
        203: [4],
        301: [4],
        302: [4],
        303: [4],
        104: [7],
        204: [7],
        304: [7],
        105: [8],
        305: [8],
        106: [9],
        206: [9],
        306: [9],
        113: [2],
        213: [2],
        313: [2],
        112: [2],
        111: [2],

        115: [2],
        11511: [3],

        315: [2],
        31511: [3],

        114: [2],
        114678: [3],
        11467: [3],
        1146: [3],
        114678678: [3],
        11467867: [3],
        1146786: [3],
        11467678: [3],
        1146767: [3],
        114676: [3],
        1146678: [3],
        114667: [3],
        11466: [3],

        214: [2],
        214678: [3],
        21467: [3],
        2146: [3],
        214678678: [3],
        21467867: [3],
        2146786: [3],
        21467678: [3],
        2146767: [3],
        214676: [3],
        2146678: [3],
        214667: [3],
        21466: [3],

        314: [2],
        314678: [3],
        31467: [3],
        3146: [3],
        314678678: [3],
        31467867: [3],
        3146786: [3],
        31467678: [3],
        3146767: [3],
        314676: [3],
        3146678: [3],
        314667: [3],
        31466: [3],

        400: [2],
      };
      //
      // const disabledMap = {
      //   102: [4],
      // };
      //
      // const orderMap = {
      //   105: [9, 22, 11],
      // };

      const includesAb = _.curry2(_.flip(_.includes));

      const assocFirst = _.curry3((prop, val, arr) =>
          _.prepend(_.assoc(prop, val, _.head(arr)), _.tail(arr)));

      const assocWhen = (prop, val, pred) =>
          _.map(_.when(pred, _.assoc(prop, val)));

      const propIsIncluded = (prop, arr) =>
          _.pipe(_.prop(prop), includesAb(arr));

      const markSelected = (selected) =>
          _.ifElse(
              _.always(_.undef(selected)),
              assocFirst('selected', true),
              assocWhen('selected', true, propIsIncluded('id', selected)),
          );

      const getAll = (id) => {
        if (_.undef(id)) {
          return _.map(_.dissoc('on'), types);
        }

        /* start-dev-block */
        let r = _.filter(_.pipe(_.prop('on'), _.includes(id)), types);
        if (_.isNilOrEmpty(r)) {
          console.log('TYPES', id, r);
        }
        /* end-dev-block */

        return _.pipe(
            _.filter(_.pipe(_.prop('on'), _.includes(id))),
            markSelected(selectedMap[id]),
            _.map(_.dissoc('on'))
        )(types);
      };

      return {
        getAll,
      };
    },
  ]);
