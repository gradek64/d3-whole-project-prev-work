/**
 * Created by Sergiu Ghenciu on 26/04/2018
 *
 * In order to optimize the app one would rather query
 * the Costs API at a higher level.
 *
 * This service tries to recommend a level based on group-by options.
 */

'use strict';

// prettier-ignore
angular
  .module('services.report-levels-service', ['utils.misc'])
  .factory('reportLevelService', [
    'misc',
    function(_) {
      const items = [
        {
          id: 'Source',
          order: '0',
          on: [
            'Source',
            1012, 1011, 1013, 10132, 10112, 10121, 10123, 10113, 10131,
            101213, 101231, 101123, 101132, 101321, 101312, 1024, 10242,
            10241, 10243, 1024213, 1024123, 1024321, 1035, 10354,
            103544, 1112, 1111, 1113, 1124,
          ],
        },
        {
          id: 'Entitlement',
          order: '1',
          on: [
            10246, 10246678,
            10356, 10356678, 104678, 10467, 1046, 1135, 11344, 113544,
            11354444, 11356, 113566, 1135644, 1135655, 1135655655,
            11356655,

            114, 114678, 11467, 1146,
            114678678, 11467867, 1146786,
            11467678, 1146767, 114676,
            1146678, 114667, 11466,

            11467867844, 1146786744, 114678644,
            1146767844, 114676744, 11467644,
            114667844, 11466744, 1146644,

            11467867855, 1146786755, 114678655,
            1146767855, 114676755, 11467655,
            114667855, 11466755, 1146655,
          ],
        },
        {
          id: 'Functional',
          order: '2',
          on: [],
        },
        {
          id: 'Infrastructure 1',
          order: '3',
          on: [],
        },
        {
          id: 'Infrastructure 2',
          order: '4',
          on: [],
        },
        {
          id: 'Infrastructure 3',
          order: '5',
          on: [],
        },
        {
          id: 'Services',
          order: '6',
          on: [
            'Services',
            1052211, 105911, 2012, 2011, 2013, 20132, 20112, 20121,
            20123, 20113, 20131, 201213, 201231, 201123, 201132, 201321,
            201312, 2024, 20242, 20241, 20243, 2024213, 2024123,
            2024321, 2035, 20354, 203544, 20246, 20246678, 20356,
            20356678, 204678, 20467, 2046, 2135, 213544, 21354444,
            2135655, 2135655655, 21356, 213566,
            115, 11511, 115119,

            214, 214678, 21467, 2146,
            214678678, 21467867, 2146786,
            21467678, 2146767, 214676,
            2146678, 214667, 21466,

            21467867844, 2146786744, 214678644,
            2146767844, 214676744, 21467644,
            214667844, 21466744, 2146644,

            21467867855, 2146786755, 214678655,
            2146767855, 214676755, 21467655,
            214667855, 21466755, 2146655,

            400,
          ],
        },
        {
          id: 'Target',
          order: '7',
          on: [
            'Target',
            1061133, 2061133, 3012, 3011, 3013, 30132, 30112, 30121,
            30123, 30113, 30131, 301213, 301231, 301123, 301132, 301321,
            301312, 3024, 30242, 30241, 30243, 3024213, 3024123,
            3024321, 3035, 30354, 303544, 30246, 30246678, 30356,
            30356678, 304678, 30467, 3046, 3052211, 305911, 3061133,
            3135, 313544, 31354444, 3135655, 3135655655, 31356, 313566,

            314, 314678, 31467, 3146,
            314678678, 31467867, 3146786,
            31467678, 3146767, 314676,
            3146678, 314667, 31466,

            31467867844, 3146786744, 314678644,
            3146767844, 314676744, 31467644,
            314667844, 31466744, 3146644,

            31467867855, 3146786755, 314678655,
            3146767855, 314676755, 31467655,
            314667855, 31466755, 3146655,

            315, 31511, 315119,
          ],
        },
      ];

      const getOne = (id) => {
        /* start-dev-block */
        let r = _.find(_.pipe(_.prop('on'), _.includes(id)), items);
        console.warn('LEVEL', id, _.when(_.def, _.prop('id'), r));
        /* end-dev-block */

        return _.unless(
            _.undef,
            _.dissoc('on'),
            _.find(_.pipe(_.prop('on'), _.includes(id)), items));
      };

      return {
        getOne,
      };
    },
  ]);
